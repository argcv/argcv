#!/usr/bin/env bash

set -e
set -o pipefail

[ -f .argcv.env.rc ] && . .argcv.env.rc

[ -f tools/bash_helpers.sh ] && . tools/bash_helpers.sh

if is_windows; then
  echo "WARNING, this code in windows is not tested yet right now."
fi

MIN_BAZEL_VERSION=0.4.5

export BAZELRC=tools/bazel.rc
# Write tools/bazel.rc
echo "# Autogenerated by configure: DO NOT EDIT" > $BAZELRC


# configure python
[ -x $PYBIN ] && PYBIN=${1:-python3}
echo "PYBIN=$PYBIN"
./third_party/py/python_config.sh --setup $(which $PYBIN)

# collect environment variables

# Find out the absolute path to where ./setup resides
pushd $(dirname $0) > /dev/null
SOURCE_BASE_DIR=$(pwd -P)
popd > /dev/null

write_action_env_to_bazelrc "ARGCV_SOURCE_BASE_DIR" "$SOURCE_BASE_DIR"

function _bazel_version_fmt() {
  echo "$@" | awk -F. '{ printf("%03d%03d%03d\n", $1,$2,$3); }';
}

curr_bazel_version=$(bazel version | grep 'Build label:' | cut -d ' ' -f3)

echo "You have bazel $curr_bazel_version installed."
if [ -z "$curr_bazel_version" ]; then
  die "WARNING: current bazel installation is not a release version.\n" \
    "Make sure you are running at least bazel $MIN_BAZEL_VERSION."
elif [ "$(_bazel_version_fmt "$MIN_BAZEL_VERSION")" -gt "$(_bazel_version_fmt "$curr_bazel_version")" ]; then
  die "Please upgrade your bazel installation to version $MIN_BAZEL_VERSION or higher to build ArgCV!\n"\
    "Exiting..."
fi

if is_non_interactive_mode; then
  if [ -z $ARGCV_NEED_OPENCL ]; then
    echo "[NI] No OpenCL support will be enabled for ArgCV"; ARGCV_NEED_OPENCL=0
  fi
  if [[ $ARGCV_NEED_OPENCL == "1" ]]; then
    echo "OpenCL support will be enabled for ArgCV"
  else
    echo "No OpenCL support will be enabled for ArgCV"
    ARGCV_NEED_OPENCL=0
  fi
  echo "[ENV] ARGCV_NEED_OPENCL" "$ARGCV_NEED_OPENCL"
  write_action_env_to_bazelrc "ARGCV_NEED_OPENCL" "$ARGCV_NEED_OPENCL"
else
  # interactive mode
  while [ "$ARGCV_NEED_OPENCL" == "" ]; do
    read -p "Do you wish to build ArgCV with OpenCL support? [y/N] " INPUT
    case $INPUT in
      [Yy]* ) echo "OpenCL support will be enabled for ArgCV"; ARGCV_NEED_OPENCL=1;;
      [Nn]* ) echo "No OpenCL support will be enabled for ArgCV"; ARGCV_NEED_OPENCL=0;;
      "" ) echo "No OpenCL support will be enabled for ArgCV"; ARGCV_NEED_OPENCL=0;;
      * ) echo "Invalid selection: " $INPUT;;
    esac
  done
  write_action_env_to_bazelrc "ARGCV_NEED_OPENCL" "$ARGCV_NEED_OPENCL"
fi

check_and_write_action_env_to_bazelrc "CC"
check_and_write_action_env_to_bazelrc "C_INCLUDE_PATH"
check_and_write_action_env_to_bazelrc "CFLAGS"

check_and_write_action_env_to_bazelrc "CXX"
check_and_write_action_env_to_bazelrc "CXXFLAGS"
check_and_write_action_env_to_bazelrc "CPLUS_INCLUDE_PATH"

check_and_write_action_env_to_bazelrc "LIBRARY_PATH"
check_and_write_action_env_to_bazelrc "LD_LIBRARY_PATH"

check_and_write_action_env_to_bazelrc "TMPDIR"

ARGCV_MAJOR_VERSION="0"
ARGCV_MINOR_VERSION="0"
ARGCV_PATCH_VERSION=$( ( git rev-parse HEAD 2>>/dev/null || echo '00000000' ) | cut -c1-8 )
ARGCV_VERSION="$ARGCV_MAJOR_VERSION.$ARGCV_MINOR_VERSION.$ARGCV_PATCH_VERSION"
check_and_write_action_env_to_bazelrc "ARGCV_VERSION"

echo "Configuration finished"