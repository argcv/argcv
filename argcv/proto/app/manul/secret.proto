syntax = "proto3";

package argcv.app.manul;

import "argcv/proto/api/annotations.proto";
import "argcv/proto/status/status.proto";
import "argcv/proto/app/manul/user.proto";

option cc_enable_arenas = true;
option go_package = "github.com/argcv/go-argcvapis/app/manul/secret;secret";

option java_multiple_files = true;
option java_outer_classname = "SecretProto";
option java_package = "com.argcv.proto.app.manul";


/**
 * SecretService Provides functions to update
 */
service SecretService {

    rpc UpdateSecret (UpdateSecretRequest) returns (UpdateSecretResponse) {
        option (argcv.api.http) = {
            put: "/v1/secret:reset/{user_id}"
            body: "*"
            additional_bindings {
                get: "/v1/secret:reset/{user_id}/{temp_token}"
            }
        };
    }

    rpc ForgotSecret (ForgotSecretRequest) returns (ForgotSecretResponse) {
        option (argcv.api.http) = {
            post: "/v1/secret:forgot"
        };
    }

}

// A simple struct to define secretorization info
message Secret {
    string user_id = 1;

    string secret = 2;
}

message UpdateSecretRequest {
    // by user id
    string user_id = 1;

    string user_name = 2;

    string current_secret = 3;

    string temp_token = 4;

    // leave it as empty will randomly a new one
    // string secret = 6;

    // Optional: if contains auth info
    AuthToken auth = 5;
}

message UpdateSecretResponse {
    bool success = 1;

    string message = 2;

    // The operation result, which can be either an `error` or a valid `secrets`.
    // If `success` == `false`, neither `error` nor `secrets` is set.
    // If `success` == `true`, exactly one of `error` or `response` is set.
    oneof result {
        argcv.status.Status error = 3;
        Secret secret = 4;
    }
}

message ForgotSecretRequest {
    string user_id = 1;

    string user_name = 2;
}

message ForgotSecretResponse {
    bool success = 1;

    string message = 2;

    // error message
    argcv.status.Status error = 3;
}



