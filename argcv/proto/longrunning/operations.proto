syntax = "proto3";

package argcv.longrunning;

import "argcv/proto/api/annotations.proto";
import "argcv/proto/status/status.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

option cc_enable_arenas = true;
option go_package = "github.com/argcv/go-argcvapis/longrunning;longrunning";

option java_multiple_files = true;
option java_outer_classname = "OperationsProto";
option java_package = "com.argcv.proto.longrunning";


service Operations {
    // Lists operations that match the specified filter in the request. If the
    // server doesn't support this method, it returns `UNIMPLEMENTED`.
    //
    // NOTE: the `name` binding below allows API services to override the binding
    // to use different resource name schemes, such as `users/*/operations`.
    rpc ListOperations(ListOperationsRequest) returns (ListOperationsResponse) {
        option (argcv.api.http) = { get: "/v1/{name=operations}" };
    }

    // Gets the latest state of a long-running operation.  Clients can use this
    // method to poll the operation result at intervals as recommended by the API
    // service.
    rpc GetOperation(GetOperationRequest) returns (Operation) {
        option (argcv.api.http) = { get: "/v1/{name=operations/**}" };
    }

    // Deletes a long-running operation. This method indicates that the client is
    // no longer interested in the operation result. It does not cancel the
    // operation. If the server doesn't support this method, it returns
    // `argcv.error.Code.UNIMPLEMENTED`.
    rpc DeleteOperation(DeleteOperationRequest) returns (google.protobuf.Empty) {
        option (argcv.api.http) = { delete: "/v1/{name=operations/**}" };
    }

    // Starts asynchronous cancellation on a long-running operation.  The server
    // makes a best effort to cancel the operation, but success is not
    // guaranteed.  If the server doesn't support this method, it returns
    // `argcv.error.Code.UNIMPLEMENTED`.  Clients can use
    // [Operations.GetOperation][argcv.longrunning.Operations.GetOperation] or
    // other methods to check whether the cancellation succeeded or whether the
    // operation completed despite cancellation. On successful cancellation,
    // the operation is not deleted; instead, it becomes an operation with
    // an [Operation.error][argcv.longrunning.Operation.error] value with a [argcv.status.Status.code][argcv.status.Status.code] of 1,
    // corresponding to `Code.CANCELLED`.
    rpc CancelOperation(CancelOperationRequest) returns (google.protobuf.Empty) {
        option (argcv.api.http) = { post: "/v1/{name=operations/**}:cancel" body: "*" };
    }
}

// This resource represents a long-running operation that is the result of a
// network API call.
message Operation {
    // The server-assigned name, which is only unique within the same service that
    // originally returns it. If you use the default HTTP mapping, the
    // `name` should have the format of `operations/some/unique/name`.
    string name = 1;

    // Service-specific metadata associated with the operation.  It typically
    // contains progress information and common metadata such as create time.
    // Some services might not provide such metadata.  Any method that returns a
    // long-running operation should document the metadata type, if any.
    google.protobuf.Any metadata = 2;

    // If the value is `false`, it means the operation is still in progress.
    // If true, the operation is completed, and either `error` or `response` is
    // available.
    bool done = 3;

    // The operation result, which can be either an `error` or a valid `response`.
    // If `done` == `false`, neither `error` nor `response` is set.
    // If `done` == `true`, exactly one of `error` or `response` is set.
    oneof result {
        argcv.status.Status error = 4;
        google.protobuf.Any response = 5;
    }
}

// The request message for [Operations.GetOperation][argcv.longrunning.Operations.GetOperation].
message GetOperationRequest {
    // The name of the operation resource.
    string name = 1;
}

// The request message for [Operations.ListOperations][argcv.longrunning.Operations.ListOperations].
message ListOperationsRequest {

    // The name of the operation collection.
    string name = 4;

    // The standard list filter.
    string filter = 1;

    // The standard list page size.
    int32 page_size = 2;

    // The standard list page token.
    string page_token = 3;
}

// The response message for [Operations.ListOperations][argcv.longrunning.Operations.ListOperations].
message ListOperationsResponse {
    // A list of operations that matches the specified filter in the request.
    repeated Operation operations = 1;

    // The standard List next-page token.
    string next_page_token = 2;
}

// The request message for [Operations.CancelOperation][argcv.longrunning.Operations.CancelOperation].
message CancelOperationRequest {
    // The name of the operation resource to be cancelled.
    string name = 1;
}

// The request message for [Operations.DeleteOperation][argcv.longrunning.Operations.DeleteOperation].
message DeleteOperationRequest {
    // The name of the operation resource to be deleted.
    string name = 1;
}