PROJECT(argcv)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.8)

SET(GLO_VERSION_MAJOR 0)
SET(GLO_VERSION_MINOR 0.1)

SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH YES)

SET(CMAKE_MACOSX_RPATH YES)

MESSAGE(STATUS "ARGCV CMAKE_INSTALL_PREFIX " ${CMAKE_INSTALL_PREFIX})
MESSAGE(STATUS "ARGCV CMAKE_MACOSX_RPATH " ${CMAKE_MACOSX_RPATH})

MESSAGE(STATUS "ARGCV BINARY_DIR " ${PROJECT_BINARY_DIR})
MESSAGE(STATUS "ARGCV SOURCE_DIR " ${PROJECT_SOURCE_DIR})

# REQUIREMENT CHECKER 
FIND_PACKAGE(PkgConfig)
PKG_CHECK_MODULES(GLIB2 REQUIRED glib-2.0>=2.10)
# PKG_CHECK_MODULES(LIBEVENT REQUIRED libevent)
#set(Boost_USE_STATIC_LIBS        ON)
#set(Boost_USE_MULTITHREADED      ON)
#set(Boost_USE_STATIC_RUNTIME    OFF)
#find_package(Boost COMPONENTS thread filesystem system program_options REQUIRED)

SET(CMAKE_C_FLAGS "$ENV{CFLAGS}  -Wall -g -O3 --std=c99")
SET(CMAKE_CXX_FLAGS " $ENV{CXXFLAGS}  -Wall -O3 --std=c++11")
# debug cmake  -DCMAKE_BUILD_TYPE=debug ..
SET(CMAKE_C_FLAGS_DEBUG "$ENV{CFLAGS}  -Wall -g -ggdb --std=c99")
SET(CMAKE_CXX_FLAGS_DEBUG " $ENV{CXXFLAGS}  -Wall -g -ggdb --std=c++11")
# release cmake  -DCMAKE_BUILD_TYPE=release ..
SET(CMAKE_C_FLAGS_RELEASE " $ENV{CFLAGS}  -Wall  -O3 --std=c99")
SET(CMAKE_CXX_FLAGS_RELEASE " $ENV{CXXFLAGS} -Wall -O3 --std=c++11")

SET (RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")

# INCLUDE DIRECTORIES
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})

# LINK DIRECTORIES
LINK_DIRECTORIES(${PROJECT_BINARY_DIR}/lib)

LIST(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})


SET(OPTIONS_USE_EXTERNAL_CRFPP NO)
SET(OPTIONS_USE_EXTERNAL_MONGO_CXX NO)
SET(OPTIONS_USE_EXTERNAL_LEVELDB YES)

INCLUDE(ExternalProject) # IF NEED EXTEND PROJECT

IF(OPTIONS_USE_EXTERNAL_CRFPP)
	INCLUDE(ExternalCrfpp)
    INCLUDE_DIRECTORIES(${CRFPP_INCLUDE_DIR})
    LINK_DIRECTORIES(${CRFPP_LIB_DIR})
ENDIF(OPTIONS_USE_EXTERNAL_CRFPP)

IF(OPTIONS_USE_EXTERNAL_MONGO_CXX)
	INCLUDE(ExternalMongoCXX)
    INCLUDE_DIRECTORIES(${MONGO_CXX_INCLUDE_DIR})
    LINK_DIRECTORIES(${MONGO_CXX_LIB_DIR})
ENDIF(OPTIONS_USE_EXTERNAL_MONGO_CXX)

IF(OPTIONS_USE_EXTERNAL_LEVELDB)
	INCLUDE(ExternalLeveldb)
    INCLUDE_DIRECTORIES(${LEVELDB_INCLUDE_DIR})
    LINK_DIRECTORIES(${LEVELDB_LIB_DIR})
ENDIF(OPTIONS_USE_EXTERNAL_LEVELDB)

#SET(LEVELDB_INCLUDE_DIR ${leveldb_build})
#SET(LEVELDB_LIB_DIR ${leveldb_build})


ADD_SUBDIRECTORY(lib)


#ADD_TEST(evolution ${EXECUTABLE_OUTPUT_PATH}/percimpl evo )
#ENABLE_TESTING()



